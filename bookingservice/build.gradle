plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.team11.bookingservice'
version = '0.0.1-SNAPSHOT'

java {
	// toolchain {
	// 	languageVersion = JavaLanguageVersion.of(17)
	// }
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

// sourceSets {
//     main {
//         java {
//             srcDirs += 'build/generated-avro-java'
//         }
//     }
// }

repositories {
	mavenCentral()
	maven {
        url "https://packages.confluent.io/maven/"
    }
}

ext {
    springCloudVersion = "2024.0.0"
}


// Global exclusion for commons-logging
configurations.all {
    exclude group: 'commons-logging', module: 'commons-logging'
}

// runtimeOnly('org.apache.avro:avro-tools:1.12.0') {
//     exclude group: 'org.slf4j', module: 'slf4j-reload4j'
// }

dependencies {

	// Base Spring Deps
    implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// MQ/Kafka
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.kafka:spring-kafka'

	// // Avro
	// implementation 'org.apache.avro:avro:1.12.0' // Avro core
	// implementation 'io.confluent:kafka-avro-serializer:7.8.0' // Kafka Avro integration
	// implementation 'org.apache.kafka:kafka-clients:3.9.0' // Kafka client
	// runtimeOnly 'org.apache.avro:avro-tools:1.12.0'

	// Lombok for reducing boilerplate
	// This is awesome
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

	// DB
    implementation 'org.postgresql:postgresql'

	// JWT: JJWT dependencies for production-grade token handling.
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	implementation project(':jwtutil')

	// MapStruct dependencies
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	// Adds configuration processor to generate metadata for custom properties
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// OpenAPI/Swagger Support
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'

	// Docker Compose
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
	testImplementation 'org.mockito:mockito-core:5.15.2'

	// Test Containers
	testImplementation 'org.testcontainers:postgresql:1.20.4'
	testImplementation 'org.testcontainers:junit-jupiter:1.20.4'
}

// task generateAvroJava(type: JavaExec) {
//     inputs.dir("src/main/avro") // Track changes in the Avro schema directory
//     outputs.dir("build/generated-avro-java") // Only regenerate if necessary

//     mainClass = 'org.apache.avro.tool.Main'
//     classpath = configurations.runtimeClasspath
//     args = ['compile', 'schema', 'src/main/avro', 'build/generated-avro-java']
// }

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}
// compileJava.dependsOn generateAvroJava
